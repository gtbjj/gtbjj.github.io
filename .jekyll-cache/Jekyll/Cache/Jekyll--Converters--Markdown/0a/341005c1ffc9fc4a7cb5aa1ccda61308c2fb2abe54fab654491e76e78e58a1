I"3<h3 id="improving-boot-performance">Improving Boot Performance:</h3>

<p>Everybody wants their computer to be faster.  That includes 
starting up faster.  This is obviously true if you’re 
hosting a server, but even for personal use.  Admitedly, I 
don’t think it’s that important for a high end desktop rig 
that you leave on (or suspended) all the time.</p>

<p>However, my current workstation is a modest <a href="https://www.asus.com/us/Notebooks/ASUS_EeeBook_X205TA/">Asus 
X205TA</a>.<br />
In fact, I have <a href="https://github.com/savagezen/x205ta">GitHub repo specifically for tweaking this 
machine</a>.  At any rate, 
with a portable machine, starting up quickly is paramount.</p>

<p>This post will specifcally cover customizing / <a href="https://wiki.archlinux.org/index.php/Minimal_initramfs">creating a 
minimal Linux 
kernel</a>.<br />
For more performance options, see <a href="https://wiki.archlinux.org/index.php/improve_boot_performance">the relevant Arch Wiki 
article</a> 
on the subject.</p>

<h3 id="my-process">My Process:</h3>

<p>The Arch Wiki references <a href="http://blog.falconindy.com/articles/optmizing-bootup-with-mkinitcpio.html">this 
tutorial</a>, 
whcih provides a conceptual understanding of what we’re 
doing here (<em>creating a kernel with only the modules 
required to boot your system</em>) but lacks the specifics for 
this machine (Asus X205TA).</p>

<ol>
  <li>
    <p>Take note of the modules listed in the output of:</p>

    <blockquote>
      <p><code class="highlighter-rouge">$ lspci -vk | grep "Kernel modules"</code></p>
    </blockquote>
  </li>
  <li>
    <p>Next, take note of the output from</p>

    <blockquote>
      <p><code class="highlighter-rouge">$ udevadm info --attribute-walk -n /dev/mmcblk0 | 
grep 'DRIVERS'</code></p>
    </blockquote>
  </li>
  <li>
    <p>Then check over the output of <code class="highlighter-rouge">$ lsmod</code> with the 
modules the above command found.  You’ll need to include 
any dependencies as well. (e.g. sdhci_acpi &gt; sdhci &gt; 
mmc_block &gt; mmc_core)</p>
  </li>
  <li>
    <p>Next, take note of what your root filesystem is as 
mentioned in the referenced tutorial.  Likely, the module name is 
just the name of the filesystem, with a few exceptions.</p>
  </li>
  <li>
    <p>Then I created an alternate <em>mkinitcpio.conf</em>.  I 
didin’t want to bork my existing config during the testing 
stages.  (If you <strong>do not</strong> want to use th eminimal config 
for kernel updates, you’ll need to follow this step as well 
)</p>

    <blockquote>

      <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre> # cp /etc/mkinitcpio.conf /etc/mkinitcpio-tiny.conf 
 # nano /etc/mkinitcpio-tiny.conf
</pre></td></tr></tbody></table></code></pre></div>      </div>
    </blockquote>

    <blockquote>

      <ul>
        <li>Cut down the <em>HOOKS</em> array to only include 
“<em>base</em>.”</li>
        <li>In the “BINARIES” array, include “<em>fsck</em>” and 
“<em>fsck.your_filesystem</em>.”</li>
        <li>The “MODULES” array should contain the long list of 
modules you’ve been collecting in the steps above.</li>
      </ul>
    </blockquote>
  </li>
  <li>
    <p>I’ll save everyone the trail and error I had to go 
through to find out which ones were essential.  Below is 
the most minimal I could make.</p>

    <blockquote>

      <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre> /etc/mkinitcpio-tiny.conf
 -----
 MODULES="your_filesystem mmc_block sdhci sdhci_acpi i915"        
 BINARIES="fsck fsck.f2fs"   
 HOOKS="base"
</pre></td></tr></tbody></table></code></pre></div>      </div>
    </blockquote>
  </li>
  <li>After that, create the kernel image via:
    <blockquote>
      <p><code class="highlighter-rouge"># mkinitcpio -c /etc/mkinitcpio-tiny.conf -g 
/boot/initramfs-linux-tiny.img</code></p>
    </blockquote>
  </li>
  <li>
    <p>Finally, add an entry to your boot loarder which selects 
the custom image.  In my case 
(<a href="https://wiki.archlinux.org/index.php/Systemd-boot">systemd-boot</a>) 
that means:</p>

    <blockquote>

      <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre> /boot/loader/entries/tiny.conf
 -----
 title Arch Linux i686 - Tiny
 linux /vmlinuz-linux
 initrd /initramfs-linux-tiny.img
</pre></td></tr></tbody></table></code></pre></div>      </div>
    </blockquote>
  </li>
</ol>

<h3 id="results">Results:</h3>

<p>There’s nothing mindblowing here.  I certainly wouldn’t 
complain too much about the single digit boot time I 
achieved before this process, but it was worth an afternoon 
of tinkering.</p>

<h4 id="image-size">Image Size:</h4>

<blockquote>
  <p>Before</p>
</blockquote>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre>$ du -sh /boot/initramfs-linux.img
-----
3.1M    /boot/initramfs-linux.img
</pre></td></tr></tbody></table></code></pre></div></div>

<blockquote>
  <p>After</p>
</blockquote>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre>$ du -sh /boot/initramfs-linux-tiny.img
-----
2.9M    /boot/initramfs-linux-tiny.img
</pre></td></tr></tbody></table></code></pre></div></div>

<h4 id="boot-time">Boot Time:</h4>

<blockquote>
  <p>Before (mount options: rw intel_idle.max_cstate=1)</p>
</blockquote>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre>$ systemd-analyze
-----
Startup finished in 4.425s (firmware) + 174ms (loader) + 
1.363 (kernel) + 2.876s (userspace) = 9.630s
</pre></td></tr></tbody></table></code></pre></div></div>

<blockquote>
  <p>After (mount options: rw intel_idle.max_cstate=1 discard 
relatime noacl background_gc=on inline_data active_logs=6)</p>
</blockquote>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre>$ systemd-analyze
-----
Startup finished in 3.423s (frimware) + 166ms (loader) + 
2.71s (kernel) + 1.558s (userspace) = 7.864s
</pre></td></tr></tbody></table></code></pre></div></div>

<p>PS:  Other Boot Performance Tips Include:  removing daemons 
that start on boot, tuning your filesystem’s mount options, 
set your bootloader’s timeout delay to 0 seconds.</p>
:ET